@use "sass:map";
@use '@angular/material' as mat;

$app-global-palettes: (
  material: (
    50: #E5F8F9,
    100: #BEEEF0,
    200: #97E4E8,
    300: #70DAE0,
    400: #49D0D8,
    500: #22C6D0,
    600: #1EAFB8,
    700: #1A98A0,
    800: #168188,
    900: #28BBC9,
    contrast: (
      50: rgba(black, 0.87),
      100: rgba(black, 0.87),
      200: rgba(black, 0.87),
      300: white,
      400: white,
      500: white,
      600: white,
      700: white,
      800: white,
      900: white
    )
  ),
  color: (
    primary: #28BBC9,
    secondary: #160F41,
    hover: #1F9CA4,
    input: #28BBC9,
    white: #ffffff,
    black: #000000,
    red-600: #e11d48,
    red-500: #dc2626,
    orange-500: #ea580c
  ),
  grays: (
    50: #F1F1F1,
    100: #EAEAEA,
    150: #E8EAEE,
    200: #D5D5D5,
    300: #C0C0C0,
    400: #AAAAAA,
    500: #959595,
    600: #808080,
    700: #666666,
    800: #5C5C5C,
    tailwind-100: #f3f4f6,
    tailwind-300: #d1d5db,
    tailwind-400: #9ca3af,
    tailwind-600: #6b7280
  ),
  font: (
    title: #384461,
    subtitle: #818181
  ),
  alias: (
    border: #d1d5db,
    text: #6b7280,
    placeholder: #9ca3af,
    sale: #e11d48,
    new-badge: #000000,
    background: #ffffff,
    button-primary: #000000,
    button-secondary: #ffffff
  )
);


@function get-palette($palette-name) {
  @if not map.has-key($app-global-palettes, $palette-name) {
    @error "Palette '#{$palette-name}' not found in $app-global-palettes.";
  }
  @return map.get($app-global-palettes, $palette-name);
}


@function theme-palette-color($palette-name, $scale, $type: 'color') {
  $selected-palette: get-palette($palette-name);
  $result-color: null;

  @if $type == 'color' {
    @if not map.has-key($selected-palette, $scale) {
      @error "Scale '#{$scale}' not found in palette '#{$palette-name}' for 'color' type.";
    }
    $result-color: map.get($selected-palette, $scale);
  } @else if $type == 'contrast' {
    @if not map.has-key($selected-palette, 'contrast') {
      @error "Palette '#{$palette-name}' does not have a 'contrast' map for contrast colors.";
    }
    $contrast-map: map.get($selected-palette, 'contrast');
    @if not map.has-key($contrast-map, $scale) {
      @error "Contrast scale '#{$scale}' not found in palette '#{$palette-name}'.";
    }
    $result-color: map.get($contrast-map, $scale);
  } @else {
    @error "Invalid type '#{$type}'. Must be 'color' or 'contrast'.";
  }
  @return $result-color;
}

$custom-material-primary-palette: get-palette('material');

$myapp-theme-primary: mat.m2-define-palette($custom-material-primary-palette, 900);
$myapp-theme-accent: mat.m2-define-palette(mat.$m2-indigo-palette, A200, A100, A400);
$myapp-theme-warn: mat.m2-define-palette(mat.$m2-red-palette);

$myapp-theme-typography: mat.m2-define-typography-config(
  $font-family: 'Roboto Condensed',
);

$myapp-light-theme: mat.m2-define-light-theme((
  color: (
    primary: $myapp-theme-primary,
    accent: $myapp-theme-accent,
    warn: $myapp-theme-warn,
  ),
  typography: $myapp-theme-typography
));

$myapp-dark-theme: mat.m2-define-dark-theme((
  color: (
    primary: $myapp-theme-primary,
    accent: $myapp-theme-accent,
    warn: $myapp-theme-warn,
  ),
  typography: $myapp-theme-typography
));

@mixin apply-material-theme($theme) {
  @include mat.all-component-themes($theme);
}

@mixin generate-custom-palette-css-variables() {

  :root, body {
    @each $palette-name, $palette-map in $app-global-palettes {
      @each $scale, $color-value in $palette-map {
        @if $scale != 'contrast' {
          --app-#{$palette-name}-#{""+$scale}: #{$color-value};
        } @else {
          @each $contrast-scale, $contrast-color-value in $color-value {
            --app-#{$palette-name}-contrast-#{$contrast-scale}: #{$contrast-color-value};
          }
        }
      }
    }
  }
}
